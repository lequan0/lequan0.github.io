clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster)) +
# geom_text(mapping=aes(label = rownames(clustered)), size = 3) +
# geom_point(data = group.data,size = 5, shape = 8, stroke = 2) +
# theme(legend.position="none")
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster))
# geom_text(mapping=aes(label = rownames(clustered)), size = 3) +
# geom_point(data = group.data,size = 5, shape = 8, stroke = 2) +
# theme(legend.position="none")
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster)) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
# geom_point(data = group.data,size = 5, shape = 8, stroke = 2) +
# theme(legend.position="none")
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster)) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 3
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster)) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 5
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = cluster)) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
cluster
clustered$cluster
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 5
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 3
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
# data from https://github.com/DataSlingers/clustRviz/tree/master/data
load("data/presidential_speech.rda")
pdat = presidential_speech
X = scale(pdat,center=TRUE,scale=FALSE)
sv = svd(X)
U = sv$u
V = sv$v
D = sv$d
Z = X%*%V
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 3
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 5
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
library(ConsensusClusterPlus)
results = ConsensusClusterPlus(t(pdat),maxK=6,reps=50,pItem=1,pFeature=1,
clusterAlg="km",plot="png")
heatmap(results[[2]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[3]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[4]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
library(cluster)
K = 5
km = kmeans(X,centers=K)
clust = results[[4]]
silhouette(clust$consensusClass, dmatrix = 1-clust$consensusMatrix)
clust = results[[4]]
silhouette(clust$consensusClass, dmatrix = 1-clust$consensusMatrix)
library("igraph")
library("huge")
library("glasso")
library("glmnet")
load("data/UnsupL_SISBID_2022.Rdata")
p <- ncol(sachsdat)
n <- nrow(sachsdat)
sachscor <- cov2cor(sachscov)
alpha <- 0.01
num <- qt(p=alpha/(2*(p^2)),df=n-2, lower.tail=F)
lambda <- num / sqrt(n-2 + num)
glasso.est <- glasso(s=sachscor,rho=lambda*4.2,approx=FALSE,
penalize.diagonal=FALSE)
A2 <- abs(glasso.est$wi) > 1E-16
diag(A2) <- 0
g2 <- graph.adjacency(A2, mode="undirected")
ns.est <- glasso(s=sachscor, rho=lambda, approx=TRUE, penalize.diagonal=FALSE)
A3 <- abs(ns.est$wi) > 1E-16; diag(A3) <- 0
g3 <- graph.adjacency(A3, mode="undirected")
X <- data.matrix(scale(sachsdat))
neth = huge(X,method="mb")
plot(neth)
## stability selection with huge
net.s <- huge.select(neth, criterion="stars")
net.s
plot(net.s)
#larger lambda
mat <- neth$path[[2]]
neti <- as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
#smaller lambda
mat = neth$path[[5]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
km
km$totss
?silhouette
silhouette(km)
km$betweenss
km$cluster
?km
?kmeans
?dist
library(cluster)
K = 5
km = kmeans(X,centers=K)
silhouette(km$cluster, dist(X))
X
X = scale(pdat,center=TRUE,scale=FALSE)
sv = svd(X)
U = sv$u
V = sv$v
D = sv$d
Z = X%*%V
library(cluster)
K = 5
km = kmeans(X,centers=K)
silhouette(km$cluster, dist(X))
km$cluster
colnames(km$cluster)
rownames(km$cluster)
names(km$cluster)
library(cluster)
K = 5
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
library(cluster)
K = 5
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
for (K in 2:6) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils$sil_width)))
}
sils
for (K in 2:6) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[["sil_width"]])))
}
for (K in 2:6) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,["sil_width"]])))
for (K in 2:6) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
for (K in 2:7) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
for (K in 2:7) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
for (K in 2:7) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
for (K in 2:7) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
for (K in 2:7) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
set.seed(0)
for (K in 2:7) {
for (trial in 1:10) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
print(paste("k =", K, "mean sil width", mean(sils[,3])))
}
}
set.seed(0)
for (K in 2:7) {
silmeans = c()
for (trial in 1:10) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:7) {
silmeans = c()
for (trial in 1:100) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:7) {
silmeans = c()
for (trial in 1:100) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:7) {
silmeans = c()
for (trial in 1:1000) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:7) {
silmeans = c()
for (trial in 1:200) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:8) {
silmeans = c()
for (trial in 1:200) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
set.seed(0)
for (K in 2:6) {
silmeans = c()
for (trial in 1:200) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
K = 4
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
save(sachsdat, sachscov, file = "data/sachs.Rdata")
load("data/sachs.Rdata")
p <- ncol(sachsdat)
n <- nrow(sachsdat)
sachscor <- cov2cor(sachscov)
neth$path[[7]]
neth$path
# even smaller lambda
mat = neth$path[[8]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
#smaller lambda
mat = neth$path[[5]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
#larger lambda
mat <- neth$path[[2]]
neti <- as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
# smallest lambda
mat = neth$path[[10]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
# data from https://github.com/DataSlingers/clustRviz/tree/master/data
load("data/presidential_speech.rda")
pdat = presidential_speech
X = scale(pdat,center=TRUE,scale=FALSE)
sv = svd(X)
U = sv$u
V = sv$v
D = sv$d
Z = X%*%V
K = 2
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 3
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
K = 5
km = kmeans(X,centers=K)
clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")
ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
geom_text(mapping=aes(label = rownames(clustered)), size = 3)
library(ConsensusClusterPlus)
results = ConsensusClusterPlus(t(pdat),maxK=6,reps=50,pItem=1,pFeature=1,
clusterAlg="km",plot="png")
heatmap(results[[2]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[3]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[4]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
library(cluster)
K = 2
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
K = 4
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
set.seed(0)
for (K in 2:6) {
silmeans = c()
for (trial in 1:200) {
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
silmeans[trial] = mean(sils[,3])
}
print(paste("k =", K, "mean sil width", mean(silmeans)))
}
library("igraph")
library("huge")
library("glasso")
library("glmnet")
load("data/sachs.Rdata")
p <- ncol(sachsdat)
n <- nrow(sachsdat)
sachscor <- cov2cor(sachscov)
alpha <- 0.01
num <- qt(p=alpha/(2*(p^2)),df=n-2, lower.tail=F)
lambda <- num / sqrt(n-2 + num)
glasso.est <- glasso(s=sachscor,rho=lambda*4.2,approx=FALSE,
penalize.diagonal=FALSE)
A2 <- abs(glasso.est$wi) > 1E-16
diag(A2) <- 0
g2 <- graph.adjacency(A2, mode="undirected")
ns.est <- glasso(s=sachscor, rho=lambda, approx=TRUE, penalize.diagonal=FALSE)
A3 <- abs(ns.est$wi) > 1E-16; diag(A3) <- 0
g3 <- graph.adjacency(A3, mode="undirected")
X <- data.matrix(scale(sachsdat))
neth = huge(X,method="mb")
plot(neth)
## stability selection with huge
net.s <- huge.select(neth, criterion="stars")
net.s
plot(net.s)
#larger lambda
mat <- neth$path[[2]]
neti <- as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
#smaller lambda
mat = neth$path[[5]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
# even smaller lambda
mat = neth$path[[8]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
# smallest lambda
mat = neth$path[[10]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
