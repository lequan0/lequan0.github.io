---
title: "Lab 18"
author: "quan le"
date: "`r Sys.Date()`"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library("ggplot2")
```

# Tuning and Validation for Clustering 

## Consensus Clustering

Data
```{r}
# data from https://github.com/DataSlingers/clustRviz/tree/master/data
load("data/presidential_speech.rda")
pdat = presidential_speech
```

Get SVD for plotting purposes
```{r}
X = scale(pdat,center=TRUE,scale=FALSE)
sv = svd(X)
U = sv$u
V = sv$v
D = sv$d
Z = X%*%V
```


```{r}
K = 2
km = kmeans(X,centers=K)

clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")

ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
  geom_text(mapping=aes(label = rownames(clustered)), size = 3) 
```

```{r}
K = 3
km = kmeans(X,centers=K)

clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")

ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
  geom_text(mapping=aes(label = rownames(clustered)), size = 3) 
```

```{r}
K = 5
km = kmeans(X,centers=K)

clustered = data.frame(cbind(Z[,1],Z[,2],km$cluster),stringsAsFactors = FALSE)
colnames(clustered) = c("PC1","PC2","cluster")
clustered$PC1 = as.numeric(clustered$PC1)
clustered$PC2 = as.numeric(clustered$PC2)
# projected k-means centers
group.data = data.frame(km$centers%*%V[,1:2])
group.data$label = rownames(group.data)
colnames(group.data) = c("PC1","PC2","cluster")

ggplot(clustered,mapping=aes(x = PC1,y= PC2,color = as.factor(cluster))) +
  geom_text(mapping=aes(label = rownames(clustered)), size = 3) 
```



```{r}
library(ConsensusClusterPlus)


results = ConsensusClusterPlus(t(pdat),maxK=6,reps=50,pItem=1,pFeature=1,
clusterAlg="km",plot="png")

heatmap(results[[2]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[3]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))
heatmap(results[[4]][["consensusMatrix"]], labRow=rownames(pdat), labCol=rownames(pdat))

```



## Silhouette statistic 

```{r}
library(cluster)

K = 2
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
```


```{r}
K = 4
km = kmeans(X,centers=K)
sils = silhouette(km$cluster, dist(X))
rownames(sils) = names(km$cluster)
sils
```

```{r}

set.seed(0)

for (K in 2:6) {
  silmeans = c()
  for (trial in 1:200) {
    km = kmeans(X,centers=K)
    sils = silhouette(km$cluster, dist(X))
    silmeans[trial] = mean(sils[,3])
  }
  print(paste("k =", K, "mean sil width", mean(silmeans)))
}
```








# Intro to Graphical Models

Load packages
```{r message= FALSE, warning= FALSE}
library("igraph")
library("huge")
library("glasso")

library("glmnet")
```

```{r}
load("data/sachs.Rdata")
p <- ncol(sachsdat)
n <- nrow(sachsdat)
sachscor <- cov2cor(sachscov)
```


### Graphical lasso  
Calculate lambda, based on formula in the slides (the third method)
```{r}
alpha <- 0.01
num <- qt(p=alpha/(2*(p^2)),df=n-2, lower.tail=F)
lambda <- num / sqrt(n-2 + num)
```

Apply glasso
```{r}
glasso.est <- glasso(s=sachscor,rho=lambda*4.2,approx=FALSE,
                     penalize.diagonal=FALSE)
A2 <- abs(glasso.est$wi) > 1E-16
diag(A2) <- 0
g2 <- graph.adjacency(A2, mode="undirected")
```

### Neighborhood selection
```{r}
ns.est <- glasso(s=sachscor, rho=lambda, approx=TRUE, penalize.diagonal=FALSE)
A3 <- abs(ns.est$wi) > 1E-16; diag(A3) <- 0
g3 <- graph.adjacency(A3, mode="undirected")
```

Neighborhood selection estimate with huge (Stability selection for the value of $\lambda$)  
```{r}
X <- data.matrix(scale(sachsdat))
neth = huge(X,method="mb")
plot(neth)
```


```{r}
## stability selection with huge
net.s <- huge.select(neth, criterion="stars")
net.s
plot(net.s)
```


```{r}
#larger lambda
mat <- neth$path[[2]]
neti <- as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
```


```{r}
#smaller lambda
mat = neth$path[[5]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
```

```{r}
# even smaller lambda
mat = neth$path[[8]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
```


```{r}
# smallest lambda
mat = neth$path[[10]]
neti = as.undirected(graph_from_adjacency_matrix(mat))
plot(neti,vertex.label=colnames(X),vertex.size=2,vertex.label.cex=1.2,vertex.label.dist=1,layout=layout_with_kk)
```